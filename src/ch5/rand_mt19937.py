# メルセンヌ・ツイスタによる疑似乱数の生成

# 乱数生成のための定数パラメータの指定 --- (*1)
(w, n, m, r) = (32, 624, 397, 31)
a = 0x9908B0DF
(u, d) = (11, 0xFFFFFFFF)
(s, b) = (7, 0x9D2C5680)
(t, c) = (15, 0xEFC60000)
l = 18
f = 1812433253
lower_mask = 0x7FFFFFFF
upper_mask = 0x80000000

# 乱数シードのリストを初期化 --- (*2)
MT = [0 for i in range(n)]
index = n+1 # 乱数シードのどの要素を取り出すのかを指すidnex

# 乱数シードの初期化 --- (*3)
def mt_seed(seed):
    MT[0] = seed
    for i in range(1, n):
        temp = f * (MT[i-1] ^ (MT[i-1] >> (w-2))) + i
        MT[i] = temp & 0xffffffff

# 乱数シードをかき混ぜる処理 --- (*4)
def twist():
    for i in range(0, n):
        x = (MT[i] & upper_mask) + (MT[(i+1) % n] & lower_mask)
        xA = x >> 1
        if (x % 2) != 0:
            xA = xA ^ a
        MT[i] = MT[(i + m) % n] ^ xA

# 乱数シードから疑似乱数を取り出す --- (*5)
def rand():
    global index
    if index >= n: # n(MTの要素数)を超えたらかき混ぜる
        twist() #
        index = 0
    # 焼き戻し処理(Tempering Transform) --- (*6)
    y = MT[index]
    y = y ^ ((y >> u) & d)
    y = y ^ ((y << s) & b)
    y = y ^ ((y << t) & c)
    y = y ^ (y >> l)
    index += 1
    return y & 0xffffffff

# 現在時刻(ミリ秒)から乱数シードを得る --- (*7)
from datetime import datetime
mt_seed(int(datetime.now().strftime('%f')))
if __name__ == '__main__':
   for _ in range(5): # 5回乱数を表示 --- (*8)
       print(rand())

'''
# メルセンヌ・ツイスタによる疑似乱数の生成

次の手順で行われます。

・(1) 乱数シードとして、長さnのリストMTを用意し適当な値で初期化する
・(2) 乱数シードをかき混ぜるtwist処理のためMTの各要素に次の処理を行う
・・(2-1) MT[i]の上位rビットとMT[i+1]の下位w-rビットを足し合わせ変数xとする
・・(2-2) xを右に1ビットシフトし定数aとXORをとってxAとする
・・(2-3) MT[i+m]とxAのXORをMT[i]に代入する
・(3) MT[index]をyとし以下の焼き戻し処理(Tempering Transform)の処理を行う
・・(3-1) yと、yを右にuビットずらしたもののXORをy1とする
・・(3-2) y1と、y1を左にsビットシフトしたものをbでビットマスクして、y2とする
・・(3-3) y2と、y2を左にtビットシフトしたものをcでビットマスクして、y3とする
・・(3-4) y3と、y3を右にlビットシフトしたものを、y4とする
・(4) 次の乱数のため、indexを1加算し、乱数の値としてy4を返す

上記(3-2)と(3-3)で「ビットマスク」の操作が登場しますが、これはビット演算で特定のビットだけを取り出しすることです。

# プログラムの解説

ターミナルから本プログラムを実行してみましょう。現在時刻を乱数シードとするため、実行するたびに異なる値が表示されます。

{{{
$ python3 rand_mt19937.py
584841024
1585435089
482801447
1466437933
4155421296
}}}

なお、プログラムの詳細な解説は次の通りです。

(*1)では、疑似乱数のための定数パラメータを指定します。

(*2)では、乱数シードMTを初期化します。
    なお、メルセンヌ・ツイスタでは、乱数シードがn個の要素を持つリストです。
    また、indexはリストMTのどの要素を使うのかを表すindexです。
    ここでは、indexにMTのサイズを超えるn+1を指定していますが、indexがnを超えた時に、(*4)の関数twistが実行されます。
    つまり、初回の乱数を取得するときに必ず関数twistが実行されるようにn+1を指定します。

(*3)では乱数シードを初期化する関数mt_seedを定義します。この関数は、引数として整数の値を取りますが、その値をもとにしてリスト型の乱数シードMTを生成します。

(*4)では乱数シードMTの各要素をかきまぜる関数twistを定義します。
    そもそも、乱数シードのMTの値をこね回す(twistする)ことから、この生成アルゴリズムの名前が付けられています。
    この処理は、先ほど紹介した漸化式によって行われます。箇条書きの手順(2)が参考になるでしょう。

(*5)では乱数シードから疑似乱数を取り出す処理を記述します。基本的にMT[index]が今回の乱数になりますが、(*6)の焼き戻し処理を行ってから乱数の値として戻します。
    なお、indexの値がMTのサイズnを超えたら関数twistを呼び出して、乱数シードをかき混ぜます。

(*7)では現在時刻から乱数シードを得て、mt_seed関数を呼び出して乱数シードMTを初期化します。

(*8)では5回乱数を表示します。
'''
